{"version":3,"sources":["logo.svg","Flashcard.js","FlashcardList.js","App.js","reportWebVitals.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardList","flashcards","id","App","setFlashcards","categoryEl","amountEl","categories","setCategories","axios","get","then","res","data","trivia_categories","decodeString","str","textArea","document","createElement","innerHTML","value","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","console","log","htmlFor","name","type","min","step","defaultValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.35d77b1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef } from 'react'\n\nexport default function Flashcard({ flashcard }) {\n  const [flip, setFlip] = useState(false)\n  const [height, setHeight] = useState('initial')\n\n  const frontEl = useRef()\n  const backEl = useRef()\n\n  function setMaxHeight() {\n    const frontHeight = frontEl.current.getBoundingClientRect().height\n    const backHeight = backEl.current.getBoundingClientRect().height\n    setHeight(Math.max(frontHeight, backHeight, 100))\n  }\n\n  useEffect(setMaxHeight, [flashcard.question, flashcard.answer, flashcard.options])\n  useEffect(() => {\n    window.addEventListener('resize', setMaxHeight)\n    return () => window.removeEventListener('resize', setMaxHeight)\n  }, [])\n\n  return (\n    <div\n      className={`card ${flip ? 'flip' : ''}`}\n      style={{ height: height }}\n      onClick={() => setFlip(!flip)}\n    >\n      <div className=\"front\" ref={frontEl}>\n        {flashcard.question}\n        <div className=\"flashcard-options\">\n          {flashcard.options.map(option => {\n            return <div className=\"flashcard-option\" key={option}>{option}</div>\n          })}\n        </div>\n      </div>\n      <div className=\"back\" ref={backEl}>{flashcard.answer}</div>\n    </div>\n  )\n}","import React from 'react'\nimport Flashcard from './Flashcard';\n\nexport default function FlashcardList({ flashcards }) {\n  return (\n    <div className=\"card-grid\">\n      {flashcards.map(flashcard => {\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />\n      })}\n    </div>\n  )\n}","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport FlashcardList from \"./FlashcardList\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const categoryEl = useRef();\n  const amountEl = useRef();\n\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"https://opentdb.com/api_category.php\").then((res) => {\n      setCategories(res.data.trivia_categories);\n    });\n  });\n\n  useEffect(() => {}, []);\n\n  const decodeString = (str) => {\n    const textArea = document.createElement(\"textarea\");\n    textArea.innerHTML = str;\n    return textArea.value;\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    axios\n      .get(\"https://opentdb.com/api.php\", {\n        params: {\n          amount: amountEl.current.value,\n          category: categoryEl.current.value,\n        },\n      })\n      .then((res) => {\n        setFlashcards(\n          res.data.results.map((questionItem, index) => {\n            const answer = decodeString(questionItem.correct_answer);\n            const options = [\n              ...questionItem.incorrect_answers.map((a) => decodeString(a)),\n              answer,\n            ];\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(questionItem.question),\n              answer: answer,\n              options: options.sort(() => Math.random() - 0.5),\n            };\n          })\n        );\n        console.log(res.data);\n      });\n  }\n\n  return (\n    \n    <>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"num\">Made by Ankush Sharma</label>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n            {categories.map((category) => {\n              return (\n                <option value={category.id} key={category.id}>\n                  {category.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of Questions</label>\n          <input\n            type=\"number\"\n            id=\"amount\"\n            min=\"1\"\n            step=\"1\"\n            defaultValue={10}\n            ref={amountEl}\n          />\n        </div>\n        <div className=\"form-group\">\n          <button className=\"btn\">View Questions</button>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <FlashcardList flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nconst SAMPLE_FLASHCARDS = [\n  {\n    id: 1,\n    question: \"What is 2 + 2?\",\n    answer: \"4\",\n    options: [\"2\", \"3\", \"4\", \"5\"],\n  },\n  {\n    id: 2,\n    question: \"What is 2 + 3?\",\n    answer: \"5\",\n    options: [\"2\", \"3\", \"4\", \"5\"],\n  },\n  {\n    id: 3,\n    question: \"What is 1 + 2?\",\n    answer: \"3\",\n    options: [\"2\", \"3\", \"4\", \"5\"],\n  },\n];\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}